# Copyright 2025 LSDAF
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: üê≥ Build and Push Docker Image by SHA

run-name: Build and push image for commit ${{ github.event.inputs.git_sha }} with tags

on:
  workflow_dispatch:
    inputs:
      git_sha:
        description: 'Git SHA commit to build'
        required: true
        type: string
      github_token:
        description: 'GitHub Personal Access Token with read:org permissions'
        required: true
        type: string
      latest:
        description: 'Tag the image as latest'
        required: false
        type: boolean
        default: false
      additional_tags:
        description: 'Additional tags (semicolon-separated)'
        required: false
        type: string
        default: ''

jobs:
  build-and-push:
    runs-on: 'ubuntu-22.04'
    timeout-minutes: 15
    permissions:
      actions: write
      checks: write
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: üîí Check user token permissions
        id: check_permissions
        run: |
          source ./scripts/user_permissions.sh
          check_user_permissions "${{ github.event.inputs.github_token }}" || exit 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.event.inputs.github_token }}

      - name: üîí Check docker image existence
        id: check_docker_image
        run: |
          source ./scripts/docker_utils.sh
          check_docker_image_exists "ghcr.io/lsdaf/lsadf_api:${{ github.event.inputs.git_sha }}" \
            "Image with tag ${{ github.event.inputs.git_sha }} already exists.\nNote: The workflow will continue and may add additional tags to the existing image." \
            "Image with tag ${{ github.event.inputs.git_sha }} does not exist yet. Will build and push."

      - name: Git clone lsadf_backend project
        uses: GuillaumeFalourd/clone-github-repo-action@v2.3
        with:
          branch: 'master'
          owner: 'LSDAF'
          repository: 'lsadf_backend'

      - name: üì• Checkout code at specific commit
        run: |
          cd lsadf_backend/
          git checkout ${{ github.event.inputs.git_sha }}
          echo "Checked out at ${{ github.event.inputs.git_sha }}"
          cd ../

      - name: Prepare tags
        id: prep
        run: |
          source ./scripts/docker_utils.sh
          TAGS=$(prepare_docker_tags "ghcr.io/lsdaf/lsadf_api" "${{ github.event.inputs.git_sha }}" "${{ github.event.inputs.latest }}" "${{ github.event.inputs.additional_tags }}")

          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "Tags to be used: $TAGS"

      - name: Check current working directory
        id: check_cwd
        run: |
          echo $PWD
          ls
          echo "pwd=$PWD" >> $GITHUB_OUTPUT

      - name: Tag & Push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64, linux/arm64
          file: ${{ steps.check_cwd.outputs.pwd }}/lsadf_backend/docker/Dockerfile
          context: ${{ steps.check_cwd.outputs.pwd }}/lsadf_backend/
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=LSADF API container image.

      - name: üè∑Ô∏è Create Git Tags
        if: ${{ github.event.inputs.additional_tags != '' }}
        run: |
          GIT_SHA=${{ github.event.inputs.git_sha }} source ./scripts/create_git_flags.sh
        env:
          GITHUB_TOKEN: ${{ github.event.inputs.github_token }}